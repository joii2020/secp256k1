<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="198" onload="init(evt)" viewBox="0 0 1200 198" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="198" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="181.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="181.00"> </text><svg id="frames" x="10" width="1180" total_samples="266665042"><g><title> /home/joii/code/secp256k1-x86/src/ecmult_impl.h:secp256k1_ecmult_wnaf (712,200 samples, 0.27%)</title><rect x="0.5417%" y="69" width="0.2671%" height="15" fill="rgb(227,0,7)" fg:x="1444455" fg:w="712200"/><text x="0.7917%" y="79.50"></text></g><g><title> ??:?? (131,700 samples, 0.05%)</title><rect x="0.7594%" y="53" width="0.0494%" height="15" fill="rgb(217,0,24)" fg:x="2024955" fg:w="131700"/><text x="1.0094%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_ge_from_storage (154,800 samples, 0.06%)</title><rect x="0.8106%" y="69" width="0.0581%" height="15" fill="rgb(221,193,54)" fg:x="2161555" fg:w="154800"/><text x="1.0606%" y="79.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_mul_inner (2,102,400 samples, 0.79%)</title><rect x="0.8686%" y="69" width="0.7884%" height="15" fill="rgb(248,212,6)" fg:x="2316355" fg:w="2102400"/><text x="1.1186%" y="79.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_sqr_inner (301,000 samples, 0.11%)</title><rect x="1.6570%" y="69" width="0.1129%" height="15" fill="rgb(208,68,35)" fg:x="4418755" fg:w="301000"/><text x="1.9070%" y="79.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_mul_inner (233,600 samples, 0.09%)</title><rect x="1.7807%" y="53" width="0.0876%" height="15" fill="rgb(232,128,0)" fg:x="4748455" fg:w="233600"/><text x="2.0307%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_sqr_inner (43,000 samples, 0.02%)</title><rect x="1.8683%" y="53" width="0.0161%" height="15" fill="rgb(207,160,47)" fg:x="4982055" fg:w="43000"/><text x="2.1183%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_fe_normalize_weak (68,600 samples, 0.03%)</title><rect x="2.0025%" y="37" width="0.0257%" height="15" fill="rgb(228,23,34)" fg:x="5340055" fg:w="68600"/><text x="2.2525%" y="47.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_mul_inner (3,270,400 samples, 1.23%)</title><rect x="2.0359%" y="37" width="1.2264%" height="15" fill="rgb(218,30,26)" fg:x="5428955" fg:w="3270400"/><text x="2.2859%" y="47.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/group_impl.h:secp256k1_gej_add_ge_var (4,577,300 samples, 1.72%)</title><rect x="1.8844%" y="53" width="1.7165%" height="15" fill="rgb(220,122,19)" fg:x="5025055" fg:w="4577300"/><text x="2.1344%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_sqr_inner (903,000 samples, 0.34%)</title><rect x="3.2623%" y="37" width="0.3386%" height="15" fill="rgb(250,228,42)" fg:x="8699355" fg:w="903000"/><text x="3.5123%" y="47.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_mul_inner (175,200 samples, 0.07%)</title><rect x="3.6142%" y="37" width="0.0657%" height="15" fill="rgb(240,193,28)" fg:x="9637855" fg:w="175200"/><text x="3.8642%" y="47.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/group_impl.h:secp256k1_ecmult_odd_multiples_table (5,265,300 samples, 1.97%)</title><rect x="1.7699%" y="69" width="1.9745%" height="15" fill="rgb(216,20,37)" fg:x="4719755" fg:w="5265300"/><text x="2.0199%" y="79.50"> ..</text></g><g><title> /home/joii/code/secp256k1-x86/src/group_impl.h:secp256k1_gej_double (382,700 samples, 0.14%)</title><rect x="3.6009%" y="53" width="0.1435%" height="15" fill="rgb(206,188,39)" fg:x="9602355" fg:w="382700"/><text x="3.8509%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_sqr_inner (172,000 samples, 0.06%)</title><rect x="3.6799%" y="37" width="0.0645%" height="15" fill="rgb(217,207,13)" fg:x="9813055" fg:w="172000"/><text x="3.9299%" y="47.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_fe_normalize_weak (401,800 samples, 0.15%)</title><rect x="4.4101%" y="53" width="0.1507%" height="15" fill="rgb(231,73,38)" fg:x="11760155" fg:w="401800"/><text x="4.6601%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_fe_normalizes_to_zero_var (118,900 samples, 0.04%)</title><rect x="4.5608%" y="53" width="0.0446%" height="15" fill="rgb(225,20,46)" fg:x="12161955" fg:w="118900"/><text x="4.8108%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_mul_inner (19,155,200 samples, 7.18%)</title><rect x="4.6053%" y="53" width="7.1832%" height="15" fill="rgb(210,31,41)" fg:x="12280855" fg:w="19155200"/><text x="4.8553%" y="63.50"> /home/joi..</text></g><g><title> /home/joii/code/secp256k1-x86/src/group_impl.h:secp256k1_gej_add_ge_var (26,740,000 samples, 10.03%)</title><rect x="3.7444%" y="69" width="10.0276%" height="15" fill="rgb(221,200,47)" fg:x="9985055" fg:w="26740000"/><text x="3.9944%" y="79.50"> /home/joii/co..</text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_sqr_inner (5,289,000 samples, 1.98%)</title><rect x="11.7886%" y="53" width="1.9834%" height="15" fill="rgb(226,26,5)" fg:x="31436055" fg:w="5289000"/><text x="12.0386%" y="63.50"> ..</text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_fe_normalize_weak (176,400 samples, 0.07%)</title><rect x="14.0730%" y="53" width="0.0662%" height="15" fill="rgb(249,33,26)" fg:x="37527855" fg:w="176400"/><text x="14.3230%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_fe_normalizes_to_zero_var (52,200 samples, 0.02%)</title><rect x="14.1392%" y="53" width="0.0196%" height="15" fill="rgb(235,183,28)" fg:x="37704255" fg:w="52200"/><text x="14.3892%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_mul_inner (9,460,800 samples, 3.55%)</title><rect x="14.1588%" y="53" width="3.5478%" height="15" fill="rgb(221,5,38)" fg:x="37756455" fg:w="9460800"/><text x="14.4088%" y="63.50"> /ho..</text></g><g><title> /home/joii/code/secp256k1-x86/src/group_impl.h:secp256k1_gej_add_zinv_var (12,814,200 samples, 4.81%)</title><rect x="13.7720%" y="69" width="4.8054%" height="15" fill="rgb(247,18,42)" fg:x="36725055" fg:w="12814200"/><text x="14.0220%" y="79.50"> /home..</text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_sqr_inner (2,322,000 samples, 0.87%)</title><rect x="17.7066%" y="53" width="0.8708%" height="15" fill="rgb(241,131,45)" fg:x="47217255" fg:w="2322000"/><text x="17.9566%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_mul_inner (21,900,000 samples, 8.21%)</title><rect x="20.2414%" y="53" width="8.2126%" height="15" fill="rgb(249,31,29)" fg:x="53976755" fg:w="21900000"/><text x="20.4914%" y="63.50"> /home/joii..</text></g><g><title> /home/joii/code/secp256k1-x86/src/group_impl.h:secp256k1_gej_double (47,837,500 samples, 17.94%)</title><rect x="18.5773%" y="69" width="17.9392%" height="15" fill="rgb(225,111,53)" fg:x="49539255" fg:w="47837500"/><text x="18.8273%" y="79.50"> /home/joii/code/secp256k1-x..</text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_sqr_inner (21,500,000 samples, 8.06%)</title><rect x="28.4540%" y="53" width="8.0625%" height="15" fill="rgb(238,160,17)" fg:x="75876755" fg:w="21500000"/><text x="28.7040%" y="63.50"> /home/joii..</text></g><g><title> /home/joii/code/secp256k1-x86/src/scalar_4x64_impl.h:secp256k1_scalar_mul_512 (180,500 samples, 0.07%)</title><rect x="36.5237%" y="69" width="0.0677%" height="15" fill="rgb(214,148,48)" fg:x="97395955" fg:w="180500"/><text x="36.7737%" y="79.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/ecmult_impl.h:secp256k1_ecmult_strauss_wnaf (97,643,200 samples, 36.62%)</title><rect x="0.0191%" y="85" width="36.6164%" height="15" fill="rgb(232,36,49)" fg:x="50955" fg:w="97643200"/><text x="0.2691%" y="95.50"> /home/joii/code/secp256k1-x86/src/ecmult_impl.h:secp256k1_e..</text></g><g><title> /home/joii/code/secp256k1-x86/src/scalar_4x64_impl.h:secp256k1_scalar_reduce_512 (111,600 samples, 0.04%)</title><rect x="36.5937%" y="69" width="0.0419%" height="15" fill="rgb(209,103,24)" fg:x="97582555" fg:w="111600"/><text x="36.8437%" y="79.50"></text></g><g><title> /home/joii/code/ckb-riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/libgcc/../../.././riscv-gcc/libgcc/libgcc2.c:__ctzdi2 (1,213,100 samples, 0.45%)</title><rect x="37.1872%" y="53" width="0.4549%" height="15" fill="rgb(229,88,8)" fg:x="99165355" fg:w="1213100"/><text x="37.4372%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_fe_inv_var (3,158,400 samples, 1.18%)</title><rect x="36.6431%" y="85" width="1.1844%" height="15" fill="rgb(213,181,19)" fg:x="97714355" fg:w="3158400"/><text x="36.8931%" y="95.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/modinv64_impl.h:secp256k1_modinv64_var (3,139,600 samples, 1.18%)</title><rect x="36.6502%" y="69" width="1.1774%" height="15" fill="rgb(254,191,54)" fg:x="97733155" fg:w="3139600"/><text x="36.9002%" y="79.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/modinv64_impl.h:secp256k1_modinv64_update_de_62 (485,100 samples, 0.18%)</title><rect x="37.6456%" y="53" width="0.1819%" height="15" fill="rgb(241,83,37)" fg:x="100387655" fg:w="485100"/><text x="37.8956%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_mul_inner (175,200 samples, 0.07%)</title><rect x="37.8399%" y="85" width="0.0657%" height="15" fill="rgb(233,36,39)" fg:x="100905755" fg:w="175200"/><text x="38.0899%" y="95.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_sqr_inner (43,000 samples, 0.02%)</title><rect x="37.9056%" y="85" width="0.0161%" height="15" fill="rgb(226,3,54)" fg:x="101080955" fg:w="43000"/><text x="38.1556%" y="95.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/hash_impl.h:secp256k1_sha256_write (491,800 samples, 0.18%)</title><rect x="37.9343%" y="53" width="0.1844%" height="15" fill="rgb(245,192,40)" fg:x="101157455" fg:w="491800"/><text x="38.1843%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/hash_impl.h:secp256k1_sha256_finalize (525,700 samples, 0.20%)</title><rect x="37.9244%" y="69" width="0.1971%" height="15" fill="rgb(238,167,29)" fg:x="101131055" fg:w="525700"/><text x="38.1744%" y="79.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/hash_impl.h:secp256k1_sha256_write (512,200 samples, 0.19%)</title><rect x="38.1215%" y="69" width="0.1921%" height="15" fill="rgb(232,182,51)" fg:x="101656755" fg:w="512200"/><text x="38.3715%" y="79.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/modules/schnorrsig/main_impl.h:secp256k1_schnorrsig_challenge (1,067,400 samples, 0.40%)</title><rect x="37.9217%" y="85" width="0.4003%" height="15" fill="rgb(231,60,39)" fg:x="101123955" fg:w="1067400"/><text x="38.1717%" y="95.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/modules/schnorrsig/main_impl.h:secp256k1_schnorrsig_verify (102,238,800 samples, 38.34%)</title><rect x="0.0022%" y="101" width="38.3398%" height="15" fill="rgb(208,69,12)" fg:x="5855" fg:w="102238800"/><text x="0.2522%" y="111.50"> /home/joii/code/secp256k1-x86/src/modules/schnorrsig/main_imp..</text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_fe_inv_var (57,706 samples, 0.02%)</title><rect x="39.3322%" y="53" width="0.0216%" height="15" fill="rgb(235,93,37)" fg:x="104885325" fg:w="57706"/><text x="39.5822%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/modinv64_impl.h:secp256k1_modinv64_var (57,330 samples, 0.02%)</title><rect x="39.3324%" y="37" width="0.0215%" height="15" fill="rgb(213,116,39)" fg:x="104885701" fg:w="57330"/><text x="39.5824%" y="47.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_fe_normalize_var (2,129,660 samples, 0.80%)</title><rect x="39.3539%" y="53" width="0.7986%" height="15" fill="rgb(222,207,29)" fg:x="104943031" fg:w="2129660"/><text x="39.6039%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_ge_from_storage (1,408,852 samples, 0.53%)</title><rect x="40.1525%" y="53" width="0.5283%" height="15" fill="rgb(206,96,30)" fg:x="107072691" fg:w="1408852"/><text x="40.4025%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_mul_inner (38,278,864 samples, 14.35%)</title><rect x="40.6808%" y="53" width="14.3547%" height="15" fill="rgb(218,138,4)" fg:x="108481543" fg:w="38278864"/><text x="40.9308%" y="63.50"> /home/joii/code/secp2..</text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_sqr_inner (7,046,840 samples, 2.64%)</title><rect x="55.0355%" y="53" width="2.6426%" height="15" fill="rgb(250,191,14)" fg:x="146760407" fg:w="7046840"/><text x="55.2855%" y="63.50"> /..</text></g><g><title> /home/joii/code/secp256k1-x86/src/group_impl.h:secp256k1_ge_to_storage (4,702,208 samples, 1.76%)</title><rect x="57.6781%" y="53" width="1.7633%" height="15" fill="rgb(239,60,40)" fg:x="153807247" fg:w="4702208"/><text x="57.9281%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_fe_normalize (2,654,208 samples, 1.00%)</title><rect x="58.4461%" y="37" width="0.9953%" height="15" fill="rgb(206,27,48)" fg:x="155855247" fg:w="2654208"/><text x="58.6961%" y="47.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_fe_normalize_weak (1,605,436 samples, 0.60%)</title><rect x="62.2059%" y="37" width="0.6020%" height="15" fill="rgb(225,35,8)" fg:x="165881355" fg:w="1605436"/><text x="62.4559%" y="47.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_impl.h:secp256k1_fe_normalizes_to_zero_var (475,078 samples, 0.18%)</title><rect x="62.8079%" y="37" width="0.1782%" height="15" fill="rgb(250,213,24)" fg:x="167486791" fg:w="475078"/><text x="63.0579%" y="47.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_mul_inner (76,536,704 samples, 28.70%)</title><rect x="62.9861%" y="37" width="28.7014%" height="15" fill="rgb(247,123,22)" fg:x="167961869" fg:w="76536704"/><text x="63.2361%" y="47.50"> /home/joii/code/secp256k1-x86/src/field_5x52_..</text></g><g><title> /home/joii/code/secp256k1-x86/src/group_impl.h:secp256k1_gej_add_ge_var (107,121,898 samples, 40.17%)</title><rect x="59.4414%" y="53" width="40.1710%" height="15" fill="rgb(231,138,38)" fg:x="158509455" fg:w="107121898"/><text x="59.6914%" y="63.50"> /home/joii/code/secp256k1-x86/src/group_impl.h:secp256k1_gej_add_..</text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_sqr_inner (21,132,780 samples, 7.92%)</title><rect x="91.6875%" y="37" width="7.9248%" height="15" fill="rgb(231,145,46)" fg:x="244498573" fg:w="21132780"/><text x="91.9375%" y="47.50"> /home/joii..</text></g><g><title> /home/joii/code/secp256k1-x86/src/group_impl.h:secp256k1_ecmult_odd_multiples_table_storage_var (163,391,698 samples, 61.27%)</title><rect x="38.3430%" y="69" width="61.2723%" height="15" fill="rgb(251,118,11)" fg:x="102247309" fg:w="163391698"/><text x="38.5930%" y="79.50"> /home/joii/code/secp256k1-x86/src/group_impl.h:secp256k1_ecmult_odd_multiples_table_storage_var</text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_mul_inner (224,256 samples, 0.08%)</title><rect x="99.6323%" y="53" width="0.0841%" height="15" fill="rgb(217,147,25)" fg:x="265684447" fg:w="224256"/><text x="99.8823%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/group_impl.h:secp256k1_gej_double (489,856 samples, 0.18%)</title><rect x="99.6152%" y="69" width="0.1837%" height="15" fill="rgb(247,81,37)" fg:x="265639007" fg:w="489856"/><text x="99.8652%" y="79.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/field_5x52_int128_impl.h:secp256k1_fe_sqr_inner (220,160 samples, 0.08%)</title><rect x="99.7164%" y="53" width="0.0826%" height="15" fill="rgb(209,12,38)" fg:x="265908703" fg:w="220160"/><text x="99.9664%" y="63.50"></text></g><g><title> /home/joii/code/secp256k1-x86/src/secp256k1.c:secp256k1_context_create_noalloc (163,894,949 samples, 61.46%)</title><rect x="38.3420%" y="101" width="61.4610%" height="15" fill="rgb(227,1,9)" fg:x="102244655" fg:w="163894949"/><text x="38.5920%" y="111.50"> /home/joii/code/secp256k1-x86/src/secp256k1.c:secp256k1_context_create_noalloc</text></g><g><title> /home/joii/code/secp256k1-x86/src/secp256k1.c:secp256k1_context_preallocated_create (163,894,933 samples, 61.46%)</title><rect x="38.3420%" y="85" width="61.4610%" height="15" fill="rgb(248,47,43)" fg:x="102244671" fg:w="163894933"/><text x="38.5920%" y="95.50"> /home/joii/code/secp256k1-x86/src/secp256k1.c:secp256k1_context_preallocated_create</text></g><g><title> /home/joii/code/secp256k1-x86/src/bench_schnorrsig.c:main (266,664,048 samples, 100.00%)</title><rect x="0.0000%" y="117" width="99.9996%" height="15" fill="rgb(221,10,30)" fg:x="52" fg:w="266664048"/><text x="0.2500%" y="127.50"> /home/joii/code/secp256k1-x86/src/bench_schnorrsig.c:main</text></g><g><title> ??:?? (524,421 samples, 0.20%)</title><rect x="99.8030%" y="101" width="0.1967%" height="15" fill="rgb(210,229,1)" fg:x="266139679" fg:w="524421"/><text x="100.0530%" y="111.50"></text></g><g><title>all (266,665,042 samples, 100%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(222,148,37)" fg:x="0" fg:w="266665042"/><text x="0.2500%" y="159.50"></text></g><g><title>??:?? (266,665,042 samples, 100.00%)</title><rect x="0.0000%" y="133" width="100.0000%" height="15" fill="rgb(234,67,33)" fg:x="0" fg:w="266665042"/><text x="0.2500%" y="143.50">??:??</text></g></svg></svg>